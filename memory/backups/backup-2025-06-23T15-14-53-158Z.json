{
  "timestamp": "2025-06-23T15:14:53.158Z",
  "version": "1.0",
  "entries": [
    {
      "id": "entry_mc97unvs_muhi4et3f",
      "key": "uci_research_findings",
      "value": "UCI Configuration Merge Best Practices for OpenWRT 23.05+ research completed. Key findings: UCI is centralized config system with 3-tier hierarchy (packages/sections/options), changes staged in /tmp/.uci before commit, best practices include backup/validation/batch-mode/named-sections, conflict resolution for -opkg files and list duplications, avoid pitfalls like uncommitted changes and device-specific configs. Comprehensive guide written to uci-config-merge-best-practices.md",
      "type": "string",
      "namespace": "default",
      "tags": [],
      "metadata": {},
      "owner": "system",
      "accessLevel": "shared",
      "createdAt": "2025-06-23T14:53:01.672Z",
      "updatedAt": "2025-06-23T14:53:01.672Z",
      "lastAccessedAt": "2025-06-23T14:53:01.672Z",
      "version": 1,
      "size": 511,
      "compressed": false,
      "checksum": "155eeafe0eddc396ef277c90135fc33b82c1e3363df23b242e2b385b316c5717",
      "references": [],
      "dependencies": []
    },
    {
      "id": "entry_mc98joeo_7r2xnv0w6",
      "key": "uci_config_requirements",
      "value": "{\"project_name\":\"UCI Configuration Merge Tool\",\"version\":\"1.0.0\",\"target_platform\":\"OpenWRT 23.05+\",\"language\":\"Lua\",\"development_approach\":\"TDD\",\"core_functionality_requirements\":{\"merge_operations\":{\"description\":\"Primary merge functionality for UCI configurations\",\"requirements\":[\"Merge UCI configuration files while preserving custom settings\",\"Support three-way merge (base, current, incoming)\",\"Handle named and unnamed sections (@type[index])\",\"Merge packages, sections, and options/lists hierarchically\",\"Preserve list order and prevent duplicates\",\"Support incremental merging with staging\",\"Detect and resolve conflicts automatically where possible\",\"Maintain configuration integrity during merge operations\"]},\"backup_operations\":{\"description\":\"Comprehensive backup and restore functionality\",\"requirements\":[\"Create timestamped backups before merge operations\",\"Support selective backup of specific packages/sections\",\"Compress backups using tar.gz format\",\"Maintain backup metadata and change logs\",\"Implement automated backup rotation\",\"Support backup verification and integrity checks\",\"Provide backup comparison and diff capabilities\"]},\"validation_operations\":{\"description\":\"Configuration validation and verification\",\"requirements\":[\"Validate UCI syntax before and after merge\",\"Check configuration integrity using uci validate\",\"Verify section references and dependencies\",\"Validate option values against type constraints\",\"Check for required options and missing values\",\"Detect configuration conflicts and inconsistencies\",\"Provide detailed validation reports\"]},\"rollback_operations\":{\"description\":\"Safe rollback and recovery functionality\",\"requirements\":[\"Implement one-click rollback to previous state\",\"Support selective rollback of specific packages\",\"Maintain rollback history with change tracking\",\"Provide rollback preview and impact analysis\",\"Support emergency recovery procedures\",\"Implement failsafe rollback mechanisms\",\"Restore from backup with configuration verification\"]}},\"lua_uci_cursor_api_requirements\":{\"description\":\"Integration with Lua UCI cursor API\",\"requirements\":[\"Use libuci-lua for all UCI operations\",\"Implement cursor object management and cleanup\",\"Support cursor:get(), cursor:set(), cursor:delete() operations\",\"Implement cursor:add() for section creation\",\"Use cursor:commit() for atomic operations\",\"Support cursor:revert() for staging area management\",\"Implement cursor:foreach() for iteration\",\"Use cursor:load() and cursor:unload() for package management\",\"Support cursor:changes() for tracking modifications\",\"Implement proper error handling for cursor operations\"],\"api_patterns\":{\"initialization\":\"local uci = require('uci'); local cursor = uci.cursor()\",\"batch_operations\":\"Use cursor:batch() for multiple operations\",\"error_handling\":\"Check cursor:error() after operations\",\"memory_management\":\"Proper cursor cleanup and garbage collection\"}},\"tdd_development_requirements\":{\"description\":\"Test-driven development approach requirements\",\"requirements\":[\"Write unit tests before implementation\",\"Test all merge scenarios and edge cases\",\"Mock UCI filesystem operations for testing\",\"Create test fixtures for various UCI configurations\",\"Implement integration tests with real UCI files\",\"Test error conditions and recovery procedures\",\"Performance testing for large configurations\",\"Regression testing suite for CI/CD\"],\"testing_framework\":{\"unit_testing\":\"Lua busted framework for unit tests\",\"mocking\":\"Mock UCI cursor operations for isolated testing\",\"fixtures\":\"Sample UCI configurations for testing\",\"coverage\":\"Code coverage reporting and analysis\"},\"test_categories\":[\"Unit tests for core merge logic\",\"Integration tests with UCI API\",\"Configuration validation tests\",\"Backup and restore tests\",\"Rollback functionality tests\",\"Error handling and recovery tests\",\"Performance and stress tests\",\"CLI interface tests\"]},\"command_line_interface_requirements\":{\"description\":\"CLI interface design and functionality\",\"commands\":{\"merge\":{\"syntax\":\"uci-merge [options] <source> <target>\",\"description\":\"Merge UCI configurations\",\"options\":[\"--dry-run: Preview merge without applying changes\",\"--backup: Create backup before merge\",\"--force: Force merge with conflict resolution\",\"--package <name>: Merge specific package only\",\"--strategy <type>: Merge strategy (preserve, overwrite, smart)\",\"--verbose: Detailed operation logging\"]},\"backup\":{\"syntax\":\"uci-merge backup [options] [packages...]\",\"description\":\"Create configuration backups\",\"options\":[\"--output <file>: Specify backup file location\",\"--compress: Compress backup using gzip\",\"--metadata: Include metadata and timestamps\"]},\"restore\":{\"syntax\":\"uci-merge restore [options] <backup-file>\",\"description\":\"Restore from backup\",\"options\":[\"--package <name>: Restore specific package only\",\"--preview: Show what would be restored\",\"--force: Force restore without confirmation\"]},\"validate\":{\"syntax\":\"uci-merge validate [packages...]\",\"description\":\"Validate UCI configurations\",\"options\":[\"--report: Generate detailed validation report\",\"--fix: Attempt to fix validation errors\"]},\"diff\":{\"syntax\":\"uci-merge diff <config1> <config2>\",\"description\":\"Compare UCI configurations\",\"options\":[\"--format <type>: Output format (unified, context, json)\",\"--package <name>: Compare specific package only\"]}},\"global_options\":[\"--config-dir <path>: UCI configuration directory\",\"--help: Show help information\",\"--version: Show version information\",\"--quiet: Suppress non-error output\",\"--log-level <level>: Set logging level\"]},\"error_handling_safety_requirements\":{\"description\":\"Comprehensive error handling and safety measures\",\"requirements\":[\"Validate all input parameters and file paths\",\"Check UCI cursor operation return values\",\"Implement proper exception handling with cleanup\",\"Prevent data loss through atomic operations\",\"Use UCI batch mode for transactional operations\",\"Implement rollback on operation failure\",\"Log all operations for audit trail\",\"Provide clear error messages and recovery suggestions\"],\"safety_mechanisms\":[\"Configuration backup before any modification\",\"Dry-run mode for preview without changes\",\"Confirmation prompts for destructive operations\",\"Automatic rollback on validation failure\",\"File locking to prevent concurrent modifications\",\"Integrity checks before and after operations\",\"Emergency recovery procedures\"],\"error_categories\":[\"File system errors (permissions, disk space)\",\"UCI syntax errors and validation failures\",\"Configuration conflicts and inconsistencies\",\"Network and system resource errors\",\"User input validation errors\",\"Backup and restore operation failures\"]},\"performance_reliability_requirements\":{\"description\":\"Performance optimization and reliability standards\",\"performance_targets\":{\"small_configs\":\"< 100ms for configs under 1KB\",\"medium_configs\":\"< 500ms for configs 1KB-10KB\",\"large_configs\":\"< 2s for configs over 10KB\",\"memory_usage\":\"< 10MB RAM for typical operations\",\"concurrent_operations\":\"Support 5+ concurrent merges\"},\"reliability_requirements\":[\"99.9% operation success rate\",\"Zero data loss guarantee\",\"Graceful degradation under resource constraints\",\"Automatic recovery from partial failures\",\"Consistent behavior across OpenWRT versions\",\"Proper cleanup of temporary files and resources\"],\"optimization_strategies\":[\"Lazy loading of UCI packages\",\"Efficient diff algorithms for large configurations\",\"Memory-efficient processing of large files\",\"Parallel processing where applicable\",\"Caching of frequently accessed configurations\"]},\"integration_requirements\":{\"description\":\"Integration with OpenWRT ecosystem\",\"requirements\":[\"Compatible with OpenWRT 23.05+ UCI format\",\"Support for all standard UCI packages\",\"Integration with uci-defaults system\",\"Compatibility with sysupgrade process\",\"Support for UCI extras and validation tools\",\"Integration with configuration management systems\"],\"file_structure\":{\"config_directory\":\"/etc/config/\",\"staging_directory\":\"/tmp/.uci/\",\"backup_directory\":\"/tmp/uci-backups/\",\"log_directory\":\"/var/log/uci-merge/\"}},\"documentation_requirements\":{\"description\":\"Comprehensive documentation and examples\",\"deliverables\":[\"API documentation for Lua modules\",\"CLI usage guide with examples\",\"Configuration merge scenarios and solutions\",\"Troubleshooting guide for common issues\",\"Best practices documentation\",\"Integration examples for automation scripts\"]},\"quality_assurance\":{\"code_standards\":[\"Follow Lua coding conventions\",\"Comprehensive error handling\",\"Clear variable and function naming\",\"Modular design with separation of concerns\",\"Extensive inline documentation\"],\"testing_coverage\":{\"unit_tests\":\"95% code coverage minimum\",\"integration_tests\":\"All major use cases covered\",\"regression_tests\":\"All bug fixes have regression tests\"}}}",
      "type": "object",
      "namespace": "default",
      "tags": [],
      "metadata": {},
      "owner": "system",
      "accessLevel": "shared",
      "createdAt": "2025-06-23T15:12:28.752Z",
      "updatedAt": "2025-06-23T15:12:28.752Z",
      "lastAccessedAt": "2025-06-23T15:12:28.752Z",
      "version": 1,
      "size": 9343,
      "compressed": true,
      "checksum": "6b4a6884bc2847ed023837507f4339cd363a22bdf2c93722595135772a7e93a2",
      "references": [],
      "dependencies": []
    },
    {
      "id": "entry_mc98mrtw_ufdugkzw2",
      "key": "uci_config_architecture",
      "value": "{\"name\":\"UCI Config Tool Modular Architecture\",\"version\":\"1.0.0\",\"overview\":\"Modular Lua-based UCI configuration management tool for OpenWRT\",\"core_architecture\":{\"pattern\":\"Layered Modular Architecture with Dependency Injection\",\"principles\":[\"Single Responsibility Principle - Each module has one clear purpose\",\"Dependency Injection - Modules receive dependencies via constructors\",\"Interface Segregation - Small, focused interfaces\",\"Open/Closed - Extensible via plugins without core modification\",\"Testability First - All modules designed for unit testing\"],\"layers\":{\"cli\":\"Command-line interface layer\",\"application\":\"Business logic and orchestration\",\"domain\":\"Core domain logic and entities\",\"infrastructure\":\"UCI cursor API and filesystem access\"}},\"module_structure\":{\"core\":{\"uci_cursor\":{\"description\":\"UCI cursor wrapper with connection pooling\",\"interface\":{\"new\":\"function(config_path?: string) -> cursor_instance\",\"get\":\"function(config: string, section: string, option?: string) -> value\",\"set\":\"function(config: string, section: string, option: string, value: any) -> boolean\",\"add\":\"function(config: string, type: string) -> section_name\",\"delete\":\"function(config: string, section: string, option?: string) -> boolean\",\"commit\":\"function(config?: string) -> boolean\",\"revert\":\"function(config?: string) -> boolean\",\"foreach\":\"function(config: string, type?: string, callback: function) -> nil\"},\"implementation\":\"-- core/uci_cursor.lua\\nlocal uci = require(\\\"uci\\\")\\n\\nlocal UCICursor = {}\\nUCICursor.__index = UCICursor\\n\\nfunction UCICursor:new(config_path)\\n    local self = setmetatable({}, UCICursor)\\n    self.cursor = uci.cursor(config_path)\\n    self.transactions = {}\\n    return self\\nend\\n\\nfunction UCICursor:with_transaction(func)\\n    table.insert(self.transactions, {})\\n    local ok, err = pcall(func, self)\\n    if ok then\\n        table.remove(self.transactions)\\n        return true\\n    else\\n        self:revert()\\n        table.remove(self.transactions)\\n        return false, err\\n    end\\nend\"},\"error_handler\":{\"description\":\"Centralized error handling with error codes and logging\",\"interface\":{\"wrap\":\"function(func: function, context: string) -> function\",\"handle\":\"function(err: any, context: string) -> error_result\",\"log\":\"function(level: string, message: string, data?: table) -> nil\"},\"error_codes\":{\"UCI_CONNECTION_FAILED\":1001,\"UCI_CONFIG_NOT_FOUND\":1002,\"UCI_SECTION_NOT_FOUND\":1003,\"UCI_OPTION_NOT_FOUND\":1004,\"UCI_COMMIT_FAILED\":1005,\"VALIDATION_FAILED\":2001,\"MERGE_CONFLICT\":3001,\"BACKUP_FAILED\":4001,\"RESTORE_FAILED\":4002}},\"logger\":{\"description\":\"Structured logging with levels and formatters\",\"interface\":{\"debug\":\"function(message: string, data?: table) -> nil\",\"info\":\"function(message: string, data?: table) -> nil\",\"warn\":\"function(message: string, data?: table) -> nil\",\"error\":\"function(message: string, data?: table) -> nil\",\"set_level\":\"function(level: string) -> nil\"}}},\"domain\":{\"config_validator\":{\"description\":\"Configuration validation with schema support\",\"interface\":{\"validate\":\"function(config: table, schema: table) -> boolean, errors?\",\"validate_option\":\"function(value: any, type: string, constraints?: table) -> boolean, error?\",\"register_type\":\"function(name: string, validator: function) -> nil\"},\"schema_format\":{\"example\":{\"network\":{\"type\":\"object\",\"sections\":{\"interface\":{\"type\":\"list\",\"item_type\":\"object\",\"required\":[\"proto\",\"ifname\"],\"properties\":{\"proto\":{\"type\":\"string\",\"enum\":[\"static\",\"dhcp\",\"pppoe\"]},\"ifname\":{\"type\":\"string\",\"pattern\":\"^[a-zA-Z0-9_-]+$\"},\"ipaddr\":{\"type\":\"ipv4\",\"required_if\":{\"proto\":\"static\"}},\"netmask\":{\"type\":\"netmask\",\"required_if\":{\"proto\":\"static\"}}}}}}}}},\"config_merger\":{\"description\":\"Three-way merge for configuration files\",\"interface\":{\"merge\":\"function(base: table, local: table, remote: table, strategy?: string) -> merged, conflicts\",\"resolve_conflict\":\"function(conflict: table, resolution: string) -> resolved_value\",\"register_strategy\":\"function(name: string, handler: function) -> nil\"},\"strategies\":[\"ours\",\"theirs\",\"union\",\"interactive\",\"custom\"]},\"config_differ\":{\"description\":\"Configuration comparison and diff generation\",\"interface\":{\"diff\":\"function(old: table, new: table) -> diff_table\",\"patch\":\"function(base: table, diff: table) -> patched_table\",\"format\":\"function(diff: table, format: string) -> string\"}}},\"application\":{\"backup_service\":{\"description\":\"Configuration backup and restore with versioning\",\"interface\":{\"create\":\"function(configs?: table, metadata?: table) -> backup_id\",\"restore\":\"function(backup_id: string, options?: table) -> boolean, errors?\",\"list\":\"function(filter?: table) -> backup_list\",\"delete\":\"function(backup_id: string) -> boolean\"},\"storage\":\"/etc/uci-backup/\",\"format\":\"tar.gz with metadata.json\"},\"template_service\":{\"description\":\"Configuration templating with variable substitution\",\"interface\":{\"apply\":\"function(template: string, variables: table) -> config_table\",\"validate\":\"function(template: string) -> boolean, errors?\",\"register_function\":\"function(name: string, func: function) -> nil\"},\"syntax\":\"{{variable}}, {{#if condition}}, {{#each list}}\"},\"migration_service\":{\"description\":\"Configuration migration between versions\",\"interface\":{\"migrate\":\"function(config: table, from_version: string, to_version: string) -> migrated\",\"register\":\"function(from: string, to: string, handler: function) -> nil\",\"get_version\":\"function(config: table) -> version_string\"}},\"sync_service\":{\"description\":\"Multi-device configuration synchronization\",\"interface\":{\"push\":\"function(target: string, configs: table) -> boolean\",\"pull\":\"function(source: string, configs: table) -> boolean\",\"sync\":\"function(peer: string, strategy: string) -> sync_result\"}}},\"infrastructure\":{\"config_repository\":{\"description\":\"Abstract interface for configuration storage\",\"interface\":{\"load\":\"function(config_name: string) -> config_table\",\"save\":\"function(config_name: string, data: table) -> boolean\",\"exists\":\"function(config_name: string) -> boolean\",\"list\":\"function(pattern?: string) -> config_list\"}},\"file_system\":{\"description\":\"File system operations wrapper\",\"interface\":{\"read\":\"function(path: string) -> content, error?\",\"write\":\"function(path: string, content: string) -> boolean, error?\",\"exists\":\"function(path: string) -> boolean\",\"mkdir\":\"function(path: string, recursive?: boolean) -> boolean\"}}},\"cli\":{\"command_parser\":{\"description\":\"Command-line argument parsing and routing\",\"interface\":{\"parse\":\"function(args: table) -> command, options, errors?\",\"register\":\"function(command: string, handler: function, options: table) -> nil\",\"help\":\"function(command?: string) -> help_text\"}},\"output_formatter\":{\"description\":\"Flexible output formatting\",\"interface\":{\"format\":\"function(data: any, format: string) -> formatted_string\",\"register_format\":\"function(name: string, formatter: function) -> nil\"},\"formats\":[\"json\",\"yaml\",\"table\",\"diff\",\"tree\"]}}},\"file_organization\":{\"root\":\"/usr/lib/lua/uci-config/\",\"structure\":{\"bin/\":{\"uci-config\":\"Main executable script\"},\"lib/\":{\"uci-config/\":{\"init.lua\":\"Module loader and initialization\",\"core/\":{\"uci_cursor.lua\":\"UCI cursor wrapper\",\"error_handler.lua\":\"Error handling\",\"logger.lua\":\"Logging system\",\"utils.lua\":\"Utility functions\"},\"domain/\":{\"config_validator.lua\":\"Validation logic\",\"config_merger.lua\":\"Merge algorithms\",\"config_differ.lua\":\"Diff generation\",\"schemas/\":{\"network.lua\":\"Network config schema\",\"wireless.lua\":\"Wireless config schema\",\"system.lua\":\"System config schema\"}},\"application/\":{\"backup_service.lua\":\"Backup operations\",\"template_service.lua\":\"Templating\",\"migration_service.lua\":\"Migrations\",\"sync_service.lua\":\"Synchronization\"},\"infrastructure/\":{\"config_repository.lua\":\"Storage abstraction\",\"file_system.lua\":\"File operations\",\"uci_repository.lua\":\"UCI-specific storage\"},\"cli/\":{\"command_parser.lua\":\"CLI parsing\",\"output_formatter.lua\":\"Output formatting\",\"commands/\":{\"backup.lua\":\"Backup commands\",\"merge.lua\":\"Merge commands\",\"validate.lua\":\"Validation commands\",\"sync.lua\":\"Sync commands\"}}}},\"test/\":{\"unit/\":{\"core/\":\"Core module tests\",\"domain/\":\"Domain logic tests\",\"application/\":\"Service tests\"},\"integration/\":{\"uci_integration_test.lua\":\"UCI API tests\",\"cli_integration_test.lua\":\"CLI tests\"},\"fixtures/\":{\"configs/\":\"Test configuration files\"},\"test_helper.lua\":\"Test utilities and mocks\"},\"etc/\":{\"uci-config/\":{\"config.lua\":\"Tool configuration\",\"schemas/\":\"User-defined schemas\"}}}},\"data_flow\":{\"merge_operation\":{\"flow\":[\"CLI receives merge command with config names\",\"CommandParser validates arguments and options\",\"MergeCommand loads configurations via ConfigRepository\",\"ConfigValidator validates all inputs against schemas\",\"ConfigMerger performs three-way merge\",\"Conflicts are resolved based on strategy\",\"Result is validated again\",\"UCICursor commits changes atomically\",\"Backup is created automatically\",\"OutputFormatter presents results\"]},\"validation_operation\":{\"flow\":[\"CLI receives validate command\",\"ConfigRepository loads target configuration\",\"SchemaLoader loads appropriate schema\",\"ConfigValidator performs deep validation\",\"Validation errors are collected and formatted\",\"Results are output with detailed error locations\"]}},\"tdd_structure\":{\"test_framework\":\"busted\",\"mock_strategy\":\"Dependency injection with test doubles\",\"test_patterns\":{\"unit_test_template\":\"-- test/unit/domain/config_validator_test.lua\\ndescribe(\\\"ConfigValidator\\\", function()\\n    local validator\\n    local mock_logger\\n    \\n    before_each(function()\\n        mock_logger = mock(require(\\\"uci-config.core.logger\\\"))\\n        validator = require(\\\"uci-config.domain.config_validator\\\"):new(mock_logger)\\n    end)\\n    \\n    describe(\\\"#validate\\\", function()\\n        it(\\\"should validate correct network config\\\", function()\\n            local config = {network = {lan = {proto = \\\"static\\\"}}}\\n            local schema = require(\\\"schemas.network\\\")\\n            \\n            local valid, errors = validator:validate(config, schema)\\n            \\n            assert.is_true(valid)\\n            assert.is_nil(errors)\\n        end)\\n    end)\\nend)\",\"integration_test_template\":\"-- test/integration/uci_integration_test.lua\\ndescribe(\\\"UCI Integration\\\", function()\\n    local test_cursor\\n    local test_config = \\\"test_network\\\"\\n    \\n    before_each(function()\\n        test_cursor = require(\\\"uci-config.core.uci_cursor\\\"):new(\\\"/tmp/test_uci\\\")\\n        -- Setup test environment\\n    end)\\n    \\n    after_each(function()\\n        -- Cleanup test files\\n    end)\\nend)\"},\"coverage_target\":\"90%\",\"ci_integration\":\"GitHub Actions with OpenWRT SDK\"},\"error_handling\":{\"strategy\":\"Centralized error handling with error codes and context\",\"implementation\":{\"error_types\":{\"UCIError\":\"UCI API related errors\",\"ValidationError\":\"Schema validation failures\",\"MergeError\":\"Merge conflicts and failures\",\"IOError\":\"File system operations\"},\"error_format\":{\"code\":\"number\",\"message\":\"string\",\"context\":\"table\",\"stack\":\"string (debug mode only)\"}},\"example\":\"local function safe_commit(cursor, config)\\n    return error_handler:wrap(function()\\n        if not cursor:commit(config) then\\n            error({code = ERROR_CODES.UCI_COMMIT_FAILED, \\n                   message = \\\"Failed to commit changes\\\",\\n                   context = {config = config}})\\n        end\\n    end, \\\"uci_commit\\\")\\nend\"},\"configuration_management\":{\"tool_config_location\":\"/etc/uci-config/config.lua\",\"config_schema\":{\"logging\":{\"level\":\"info < /dev/null | debug|warn|error\",\"output\":\"syslog|file|console\",\"file_path\":\"/var/log/uci-config.log\"},\"backup\":{\"path\":\"/etc/uci-backup/\",\"retention_days\":30,\"compression\":\"gzip|bzip2|none\"},\"validation\":{\"strict_mode\":\"boolean\",\"schema_path\":\"/etc/uci-config/schemas/\"},\"sync\":{\"default_timeout\":30,\"retry_attempts\":3}},\"environment_variables\":{\"UCI_CONFIG_PATH\":\"Override config path\",\"UCI_CONFIG_LOG_LEVEL\":\"Override log level\",\"UCI_CONFIG_DEBUG\":\"Enable debug mode\"}},\"module_initialization\":\"-- lib/uci-config/init.lua\\nlocal M = {}\\n\\n-- Core module loading\\nM.core = {\\n    uci_cursor = require(\\\"uci-config.core.uci_cursor\\\"),\\n    error_handler = require(\\\"uci-config.core.error_handler\\\"),\\n    logger = require(\\\"uci-config.core.logger\\\")\\n}\\n\\n-- Domain module loading with dependency injection\\nM.domain = {\\n    validator = require(\\\"uci-config.domain.config_validator\\\"):new(M.core.logger),\\n    merger = require(\\\"uci-config.domain.config_merger\\\"):new(M.core.logger),\\n    differ = require(\\\"uci-config.domain.config_differ\\\"):new()\\n}\\n\\n-- Application services\\nM.services = {\\n    backup = require(\\\"uci-config.application.backup_service\\\"):new(\\n        M.core.uci_cursor,\\n        M.infrastructure.file_system,\\n        M.core.logger\\n    )\\n}\\n\\nreturn M\",\"best_practices\":[\"Use metatables for OOP-style modules\",\"Implement proper error propagation with pcall/xpcall\",\"Use coroutines for async operations where applicable\",\"Minimize global state - use module locals\",\"Follow OpenWRT package naming conventions\",\"Use LuaDoc for API documentation\",\"Implement proper resource cleanup with finalizers\",\"Use weak tables for caching where appropriate\",\"Follow semantic versioning for releases\",\"Include comprehensive logging at all levels\"]}",
      "type": "object",
      "namespace": "default",
      "tags": [],
      "metadata": {},
      "owner": "system",
      "accessLevel": "shared",
      "createdAt": "2025-06-23T15:14:53.156Z",
      "updatedAt": "2025-06-23T15:14:53.156Z",
      "lastAccessedAt": "2025-06-23T15:14:53.156Z",
      "version": 1,
      "size": 14369,
      "compressed": true,
      "checksum": "4344b281b66f5a77ed49ce423f4fe2ae9f1e4757ecf140a67285727fbab32f16",
      "references": [],
      "dependencies": []
    }
  ],
  "statistics": {
    "overview": {
      "totalEntries": 3,
      "totalSize": 24223,
      "compressedEntries": 2,
      "compressionRatio": -45.403131115459885,
      "indexSize": 150,
      "memoryUsage": 10423296,
      "diskUsage": 0
    },
    "distribution": {
      "byNamespace": {
        "default": {
          "count": 3,
          "size": 24223
        }
      },
      "byType": {
        "string": {
          "count": 1,
          "size": 511
        },
        "object": {
          "count": 2,
          "size": 23712
        }
      },
      "byOwner": {
        "system": {
          "count": 3,
          "size": 24223
        }
      },
      "byAccessLevel": {
        "shared": {
          "count": 3,
          "size": 24223
        }
      }
    },
    "temporal": {
      "entriesCreatedLast24h": 3,
      "entriesUpdatedLast24h": 3,
      "entriesAccessedLast24h": 3,
      "oldestEntry": "2025-06-23T14:53:01.672Z",
      "newestEntry": "2025-06-23T15:14:53.156Z"
    },
    "performance": {
      "averageQueryTime": 0,
      "averageWriteTime": 1,
      "cacheHitRatio": 0,
      "indexEfficiency": 0.95
    },
    "health": {
      "expiredEntries": 0,
      "orphanedReferences": 0,
      "duplicateKeys": 0,
      "corruptedEntries": 0,
      "recommendedCleanup": false
    },
    "optimization": {
      "suggestions": [],
      "potentialSavings": {
        "compression": 0,
        "cleanup": 0,
        "deduplication": 0
      },
      "indexOptimization": [
        "Consider periodic index rebuilding for optimal performance"
      ]
    }
  }
}