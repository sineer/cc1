#!/usr/bin/env lua

-- Add lib directory to Lua path for library modules
local script_dir = debug.getinfo(1, "S").source:match("@?(.*/)") or "./"
package.path = script_dir .. "../lib/?.lua;" .. script_dir .. "../lib/commands/?.lua;" .. package.path

--[[
uci-config - UCI Configuration Merge Tool for OpenWRT 23.05+
Version: 2.0.0

Purpose:
  Safe merging of UCI configurations with network connectivity preservation,
  intelligent list deduplication, comprehensive conflict reporting, and
  automatic service restart management.
  Designed for production use with uspot captive portal deployments.

Core Features:
  - Merge UCI configs with existing system configuration
  - Smart duplicate removal from lists (network-aware)
  - Conflict detection with detailed reporting
  - Network safety validation
  - Automatic service restart after config changes
  - Service restart rollback on failure
  - Dry-run mode for testing
  - Configuration backup and restore

Usage: uci-config <command> [options] [target]

Commands:
  merge     Merge UCI configurations from directory with service restart
  config    Merge configs with default safety options (--target shorthand)
  backup    Create timestamped configuration backup
  validate  Validate UCI configuration syntax and structure
  remove    Remove configurations matching those in target with service restart
  help      Show this help information
  
  Not yet implemented:
  restore   Restore configuration from backup
  diff      Compare two UCI configurations

Options:
  --dry-run           Preview changes without applying them
  --preserve-network  Ensure network connectivity is preserved
  --dedupe-lists      Remove duplicate entries from UCI lists
  --no-restart        Skip automatic service restarts
  --rollback-on-failure Rollback changes if service restart fails (default)
  --quiet             Suppress informational output
  --verbose           Show detailed operation information
  --name=<name>       Specify backup name (for backup command)
  --force             Force operation without confirmation
  --target=<name>     Target configuration name (for config/remove commands)

Examples:
  # Preview merging uspot configs with service restart info
  uci-config merge --dry-run --verbose /path/to/uspot/configs
  
  # Create backup before changes
  uci-config backup --name pre-uspot-deployment
  
  # Merge configs with all safety features and service restart
  uci-config merge --preserve-network --dedupe-lists /path/to/configs
  
  # Merge without service restarts
  uci-config merge --no-restart /path/to/configs
  
  # Remove configurations matching target with service restart
  uci-config remove --target default --dry-run
  
  # Validate current system configuration
  uci-config validate --check-services

Exit Codes:
  0 - Success
  1 - Error occurred
--]]

-- Load command modules
local MergeCommand = require("merge_command")
local BackupCommand = require("backup_command")
local ValidateCommand = require("validate_command")
local RemoveCommand = require("remove_command")

-- Tool configuration
local VERSION = "2.0.0"

-- Command line argument parsing
local args = {...}
local command = args[1]

-- Function: log
-- Purpose: Unified logging for CLI messages
-- Parameters:
--   level: "error", "info", or "verbose"
--   message: Message to log
local function log(level, message)
    if level == "error" then
        io.stderr:write("ERROR: " .. message .. "\n")
    else
        print(message)
    end
end

-- Command implementations
local commands = {}

function commands.help()
    print([[
uci-config - UCI Configuration Merge Tool for OpenWRT 23.05+
Version: ]] .. VERSION .. [[


CORE COMMANDS (Ready for Production Use):

  merge     Merge UCI configurations with existing system config and service restart
  config    Merge configs with default safety options (--target shorthand)
  remove    Remove configurations matching those in target directory with service restart
  backup    Create timestamped backup of current UCI configuration  
  validate  Validate UCI configuration syntax and structure
  help      Show this help information

PLANNED COMMANDS (Not Yet Implemented):

  restore   Restore UCI configuration from backup
  diff      Compare two UCI configurations

Usage: uci-config <command> [options] [target]

MERGE OPTIONS:
  --dry-run               Preview changes without applying them
  --preserve-network      Ensure network connectivity is preserved
  --dedupe-lists          Remove duplicate entries from UCI lists
  --no-restart            Skip automatic service restarts
  --rollback-on-failure   Rollback changes if service restart fails (default)
  --verbose               Show detailed operation information

CONFIG OPTIONS:
  --target=<name>         Merge ./etc/config/<name> with default safety options
                          (automatically enables --preserve-network, --dedupe-lists, --preserve-existing)
  --dry-run               Preview changes without applying them
  --no-restart            Skip automatic service restarts
  --verbose               Show detailed operation information

REMOVE OPTIONS:
  --target=<name>         Remove sections matching those in ./etc/config/<name>
  --dry-run               Preview what would be removed without applying changes
  --no-restart            Skip automatic service restarts
  --verbose               Show detailed removal information

BACKUP OPTIONS:
  --name=<name>           Specify custom backup name
  --dry-run               Show what would be backed up
  --cleanup               Remove old backups (keep last 10)

VALIDATE OPTIONS:
  --source-dir=<path>     Validate configs from specific directory
  --check-services        Check if associated services are available
  --show-structure        Display configuration structure information

GENERAL OPTIONS:
  --quiet                 Suppress informational output
  --force                 Force operation without confirmation

EXAMPLES:

  # Safe merge workflow with service restart
  uci-config backup --name pre-merge
  uci-config merge --dry-run --verbose /path/to/configs
  uci-config merge --dedupe-lists /path/to/configs
  uci-config validate --check-services

  # Quick merge with default configs (recommended)
  uci-config config --target default
  
  # Preview default configs merge with service info
  uci-config config --target default --dry-run --verbose
  
  # Production deployment with all safety features
  uci-config merge --preserve-network --dedupe-lists ./etc/config/default
  
  # Merge without service restarts
  uci-config merge --no-restart ./etc/config/default
  
  # Remove configurations matching default target
  uci-config remove --target default --dry-run  # Preview removal
  uci-config remove --target default            # Actually remove
  
  # Validate configurations with service checking
  uci-config validate --check-services --verbose

For detailed usage examples, see docs/USAGE_EXAMPLES.md
For technical details, see docs/HOW_IT_WORKS.md
]])
end

-- Command: merge
-- Purpose: Merge UCI configurations from a source directory with service restart
function commands.merge()
    local merge_cmd = MergeCommand.new()
    return merge_cmd:execute(args)
end

-- Command: config  
-- Purpose: Shorthand for merge with default safety options
function commands.config()
    -- Parse command line to extract options
    local CommandBase = require("command_base")
    local base = CommandBase.new("config")
    local options, target = base:parse_options(args, 2)
    
    if not options.target then
        log("error", "No target specified for config command")
        log("error", "Usage: uci-config config --target <config-name>")
        log("info", "Example: uci-config config --target default")
        return 1
    end
    
    -- Construct source directory path and set default options
    local source_dir = "./etc/config/" .. options.target
    local config_options = {
        target = source_dir,
        ["preserve-network"] = true,
        ["dedupe-lists"] = true,
        ["preserve-existing"] = true,
        ["dry-run"] = options["dry-run"] or false,
        ["no-restart"] = options["no-restart"] or false,
        ["rollback-on-failure"] = options["rollback-on-failure"] ~= false,
        verbose = options.verbose or false,
        quiet = options.quiet or false
    }
    
    print("CONFIG INFO: Config command using target: " .. options.target)
    print("CONFIG INFO: Source directory: " .. source_dir)
    print("CONFIG INFO: Config command enabled with default safety options:")
    print("CONFIG INFO:   --preserve-network (network safety)")
    print("CONFIG INFO:   --dedupe-lists (duplicate removal)")
    print("CONFIG INFO:   --preserve-existing (keep existing values on conflicts)")
    if not config_options["no-restart"] then
        print("CONFIG INFO:   --rollback-on-failure (rollback on service restart failure)")
    end
    if config_options["dry-run"] then
        print("CONFIG INFO:   --dry-run (preview mode)")
    end
    
    -- Execute merge command with configured options
    local merge_cmd = MergeCommand.new()
    return merge_cmd:execute(args, config_options)
end

-- Command: backup
-- Purpose: Create a compressed backup of all UCI configurations
function commands.backup()
    local backup_cmd = BackupCommand.new()
    return backup_cmd:execute(args)
end

-- Command: restore (NOT YET IMPLEMENTED)
-- Purpose: Restore UCI configuration from a backup file
function commands.restore()
    log("error", "Restore functionality not yet implemented")
    log("info", "This feature will be available in a future version")
    return 1
end

-- Command: validate
-- Purpose: Validate UCI configuration files for syntax and structure
function commands.validate()
    local validate_cmd = ValidateCommand.new()
    return validate_cmd:execute(args)
end

-- Command: remove
-- Purpose: Remove configurations matching those in target directory with service restart
function commands.remove()
    local remove_cmd = RemoveCommand.new()
    return remove_cmd:execute(args)
end

-- Command: diff (NOT YET IMPLEMENTED)
-- Purpose: Compare two UCI configuration files
function commands.diff()
    log("error", "Diff functionality not yet implemented")
    log("info", "This feature will be available in a future version")
    return 1
end

-- Function: main
-- Purpose: Main entry point for CLI tool
local function main()
    if not command or command == "help" then
        commands.help()
        return 0
    end
    
    -- Core commands (implemented)
    local core_commands = {
        merge = true,
        config = true,
        backup = true,
        validate = true,
        remove = true
    }
    
    -- Planned commands (not yet implemented)
    local planned_commands = {
        restore = true,
        diff = true
    }
    
    if core_commands[command] then
        -- Execute the implemented command
        return commands[command]()
    elseif planned_commands[command] then
        -- Handle planned but unimplemented commands
        log("error", "Command '" .. command .. "' is planned but not yet implemented")
        log("info", "Currently available commands: merge, config, backup, validate, remove")
        log("info", "Use 'uci-config help' for full information")
        return 1
    else
        log("error", "Unknown command: " .. command)
        log("info", "Use 'uci-config help' for usage information")
        return 1
    end
end

-- Execute main function and exit with appropriate code
local exit_code = main()
os.exit(exit_code)