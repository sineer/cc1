#!/usr/bin/env lua

--[[
uci-config - UCI Configuration Merge Tool for OpenWRT 23.05+
A tool for merging UCI configurations with focus on uspot captive portal
support and network safety preservation.

Usage: uci-config <command> [options]

Commands:
  merge     Merge UCI configurations
  backup    Create configuration backup
  restore   Restore configuration from backup
  validate  Validate UCI configuration
  diff      Compare UCI configurations
  help      Show help information

Options:
  --dry-run         Preview changes without applying
  --preserve-network Ensure network connectivity is preserved
  --dedupe-lists    Remove duplicate list entries
  --quiet           Suppress output
  --verbose         Verbose output

Examples:
  uci-config merge --dry-run uspot-configs/
  uci-config backup --name pre-uspot-merge
  uci-config validate --check-network
--]]

local uci = require("uci")
local lfs = require("lfs")

-- Initialize UCI cursor
local cursor = uci.cursor()

-- Tool configuration
local VERSION = "1.0.0"
local BACKUP_DIR = "/tmp/uci-config-backups"
local CONFIG_DIR = "/etc/config"

-- Command line argument parsing
local args = {...}
local command = args[1]
local options = {}

-- Define boolean flags (options that don't take values)
local boolean_flags = {
    ["dry-run"] = true,
    ["preserve-network"] = true,
    ["dedupe-lists"] = true,
    ["quiet"] = true,
    ["verbose"] = true,
    ["force"] = true,
    ["check-network"] = true
}

-- Parse command line options
local i = 2
while i <= #args do
    local arg = args[i]
    if arg:match("^%-%-") then
        local key, value = arg:match("^%-%-([^=]+)=?(.*)")
        if value and value ~= "" then
            -- Handle --key=value format
            options[key] = value
        elseif boolean_flags[key] then
            -- Handle boolean flags
            options[key] = true
        elseif i + 1 <= #args and not args[i + 1]:match("^%-%-") then
            -- Handle --key value format for non-boolean options
            options[key] = args[i + 1]
            i = i + 1
        else
            -- Handle --key as boolean flag (fallback)
            options[key] = true
        end
    else
        options.target = arg
    end
    i = i + 1
end

-- Helper functions
local function log(level, message)
    if level == "error" then
        io.stderr:write("ERROR: " .. message .. "\n")
    elseif level == "info" and not options.quiet then
        print("INFO: " .. message)
    elseif level == "verbose" and options.verbose then
        print("VERBOSE: " .. message)
    end
end

local function file_exists(path)
    local f = io.open(path, "r")
    if f then
        f:close()
        return true
    end
    return false
end

local function create_backup_dir()
    lfs.mkdir(BACKUP_DIR)
end

-- Commands implementation
local commands = {}

function commands.help()
    print([[
uci-config - UCI Configuration Merge Tool for OpenWRT 23.05+

Usage: uci-config <command> [options]

Commands:
  merge     Merge UCI configurations with existing system config
  backup    Create timestamped backup of current UCI configuration
  restore   Restore UCI configuration from backup
  validate  Validate UCI configuration syntax and network safety
  diff      Compare UCI configurations
  help      Show this help information

Options:
  --dry-run           Preview changes without applying them
  --preserve-network  Ensure network connectivity is preserved
  --dedupe-lists      Remove duplicate entries from UCI lists
  --quiet             Suppress informational output
  --verbose           Show detailed operation information
  --name=<name>       Specify backup name
  --force             Force operation without confirmation

Examples:
  # Preview merging uspot configs
  uci-config merge --dry-run uspot-configs/
  
  # Create named backup before changes
  uci-config backup --name pre-uspot-merge
  
  # Merge uspot configs with network safety checks
  uci-config merge --preserve-network uspot-configs/
  
  # Validate current configuration
  uci-config validate --check-network
  
  # Show differences between configs
  uci-config diff /etc/config/firewall uspot-configs/firewall

Version: ]] .. VERSION .. [[

For uspot captive portal support on OpenWRT 23.05+
]])
end

function commands.merge()
    local source_dir = options.target
    if not source_dir then
        log("error", "No source directory specified for merge")
        return 1
    end
    
    log("info", "Starting UCI configuration merge from: " .. source_dir)
    
    if options["dry-run"] then
        log("info", "DRY RUN MODE - No changes will be applied")
    end
    
    if options["preserve-network"] then
        log("info", "Network safety mode enabled")
    end
    
    if options["dedupe-lists"] then
        log("info", "List deduplication enabled")
    end
    
    -- Load merge engine
    local success, UCIMergeEngine = pcall(require, "uci_merge_engine")
    if not success then
        log("error", "Failed to load merge engine: " .. tostring(UCIMergeEngine))
        return 1
    end
    
    -- Initialize merge engine with options
    local merge_engine = UCIMergeEngine.new({
        dry_run = options["dry-run"] or false,
        dedupe_lists = options["dedupe-lists"] or false,
        preserve_network = options["preserve-network"] or false,
        preserve_existing = true
    })
    
    -- Perform merge
    local merge_success, results = merge_engine:merge_directory(source_dir, "/etc/config")
    
    if not merge_success then
        log("error", "Merge failed: " .. tostring(results))
        return 1
    end
    
    -- Display results
    if options.verbose then
        log("info", "Merge completed successfully")
        for config_name, result in pairs(results) do
            if result.success then
                log("info", "  " .. config_name .. ": merged successfully")
                if result.conflicts > 0 then
                    log("info", "    " .. result.conflicts .. " conflicts detected")
                end
            else
                log("error", "  " .. config_name .. ": merge failed")
            end
        end
    end
    
    -- Get merge summary
    local summary = merge_engine:get_merge_summary()
    
    if #summary.conflicts > 0 then
        log("info", "Total conflicts detected: " .. #summary.conflicts)
        for _, conflict in ipairs(summary.conflicts) do
            log("verbose", "  Conflict in " .. conflict.config .. "." .. conflict.section .. "." .. conflict.option)
            log("verbose", "    Existing: " .. tostring(conflict.existing))
            log("verbose", "    New: " .. tostring(conflict.new))
        end
    end
    
    if options["dry-run"] then
        log("info", "Changes that would be made: " .. #summary.changes)
        for _, change in ipairs(summary.changes) do
            log("verbose", "  " .. change.action .. ": " .. (change.config or "unknown"))
        end
    else
        log("info", "Applied " .. #summary.changes .. " changes")
    end
    
    return 0
end

function commands.backup()
    local backup_name = options.name or ("backup-" .. os.date("%Y%m%d-%H%M%S"))
    
    log("info", "Creating backup: " .. backup_name)
    create_backup_dir()
    
    local backup_path = BACKUP_DIR .. "/" .. backup_name .. ".tar.gz"
    local cmd = string.format("tar -czf '%s' -C / etc/config", backup_path)
    
    if options["dry-run"] then
        log("info", "DRY RUN: Would execute: " .. cmd)
        return 0
    end
    
    local result = os.execute(cmd)
    if result == 0 then
        log("info", "Backup created successfully: " .. backup_path)
        return 0
    else
        log("error", "Backup failed")
        return 1
    end
end

function commands.restore()
    local backup_name = options.target
    if not backup_name then
        log("error", "No backup specified for restore")
        return 1
    end
    
    log("info", "Restoring from backup: " .. backup_name)
    
    -- TODO: Implement restore logic
    log("info", "Restore functionality not yet implemented")
    return 0
end

function commands.validate()
    log("info", "Validating UCI configuration")
    
    -- Basic UCI syntax validation
    local valid = true
    for file in lfs.dir(CONFIG_DIR) do
        if file ~= "." and file ~= ".." then
            local path = CONFIG_DIR .. "/" .. file
            local attr = lfs.attributes(path)
            if attr and attr.mode == "file" then
                log("verbose", "Validating: " .. file)
                
                -- Try to load the config file
                local success, err = pcall(function()
                    cursor:get_all(file)
                end)
                
                if not success then
                    log("error", "Invalid UCI syntax in " .. file .. ": " .. tostring(err))
                    valid = false
                end
            end
        end
    end
    
    if valid then
        log("info", "UCI configuration validation passed")
        return 0
    else
        log("error", "UCI configuration validation failed")
        return 1
    end
end

function commands.diff()
    local file1 = args[2]
    local file2 = args[3]
    
    if not file1 or not file2 then
        log("error", "Two files required for diff")
        return 1
    end
    
    log("info", "Comparing " .. file1 .. " and " .. file2)
    
    -- TODO: Implement diff logic
    log("info", "Diff functionality not yet implemented")
    return 0
end

-- Main execution
local function main()
    if not command or command == "help" then
        commands.help()
        return 0
    end
    
    if commands[command] then
        return commands[command]()
    else
        log("error", "Unknown command: " .. command)
        log("info", "Use 'uci-config help' for usage information")
        return 1
    end
end

-- Execute main function and exit with appropriate code
local exit_code = main()
os.exit(exit_code)